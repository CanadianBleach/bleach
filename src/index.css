@import "tailwindcss";

html {
  @apply bg-white text-black;
}

@media (prefers-color-scheme: dark) {
  html {
    @apply bg-black text-white;
  }
}

html,
body {
  font-family: "Dongle", sans-serif;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
}

.text-container {
  z-index: 100;
  width: 100vw;
  height: 100vh;
  display: flex;
  position: absolute;
  top: 0;
  left: 0;
  justify-content: center;
  align-items: center;
  font-size: 96px;
  @apply text-black dark:text-white;
  opacity: 0.8;
  user-select: none;
  text-shadow: 1px 1px rgba(0, 0, 0, 0.1);
}

:root {
  --color-bg1: #fefefe;
  --color-bg2: #f3f4f6; /* tailwind gray-100 */

  --color1: 255, 200, 240;
  --color2: 200, 255, 255;
  --color3: 255, 255, 180;
  --color4: 180, 255, 200;
  --color5: 255, 180, 180;

  --color-interactive: 0, 0, 0; /* black for light mode */
  --blending: multiply;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-bg1: #000014;
    --color-bg2: #110022;

    --color1: 255, 0, 150;
    --color2: 0, 255, 255;
    --color3: 255, 255, 0;
    --color4: 0, 255, 100;
    --color5: 255, 69, 0;

    --color-interactive: 255, 255, 255;
    --blending: screen;
  }
}

@keyframes moveInCircle {
  0% {
    transform: rotate(0deg);
  }
  50% {
    transform: rotate(180deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes moveVertical {
  0% {
    transform: translateY(-50%);
  }
  50% {
    transform: translateY(50%);
  }
  100% {
    transform: translateY(-50%);
  }
}

@keyframes moveHorizontal {
  0% {
    transform: translateX(-50%) translateY(-10%);
  }
  50% {
    transform: translateX(50%) translateY(10%);
  }
  100% {
    transform: translateX(-50%) translateY(-10%);
  }
}

.gradient-bg {
  width: 100vw;
  min-height: 100%;
  position: fixed;
  inset: 0;
  z-index: -1;
  overflow: hidden;
  background: linear-gradient(40deg, var(--color-bg1), var(--color-bg2));
  top: 0;
  left: 0;

  svg {
    position: fixed;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
  }

  .gradient-bg::before {
    content: "";
    position: absolute;
    width: 300%;
    height: 300%;
    background-image: radial-gradient(white 1px, transparent 1px);
    background-size: 3px 3px;
    animation: twinkle 120s linear infinite;
    opacity: 0.07;
    transform: translate(-50%, -50%);
    top: 50%;
    left: 50%;
    z-index: -1;
  }

  .gradients-container {
    filter: url(#goo) blur(40px);
    width: 100%;
    height: 100%;
  }

  .blob {
    position: absolute;
    border-radius: 50%;
    mix-blend-mode: screen;
    animation: moveInCircle infinite linear;
    background: radial-gradient(
      circle at center,
      rgba(255, 0, 255, 0.8) 0%,
      rgba(0, 0, 0, 0) 70%
    );
  }

  .blob-0 {
    background: radial-gradient(
      circle,
      rgba(255, 80, 200, 0.8) 0%,
      transparent 70%
    );
  }

  .blob-1 {
    background: radial-gradient(
      circle,
      rgba(80, 180, 255, 0.8) 0%,
      transparent 70%
    );
  }

  .blob-2 {
    background: radial-gradient(
      circle,
      rgba(255, 255, 100, 0.8) 0%,
      transparent 70%
    );
  }

  .blob-3 {
    background: radial-gradient(
      circle,
      rgba(150, 255, 200, 0.8) 0%,
      transparent 70%
    );
  }

  .blob-4 {
    background: radial-gradient(
      circle,
      rgba(255, 100, 100, 0.8) 0%,
      transparent 70%
    );
  }

  @keyframes twinkle {
    0% {
      transform: translate(-50%, -50%) rotate(0deg);
    }
    100% {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }

  @keyframes hueRotate {
    0% {
      filter: hue-rotate(0deg);
    }
    100% {
      filter: hue-rotate(360deg);
    }
  }

  .interactive {
    position: absolute;
    background: radial-gradient(
      circle at center,
      rgba(var(--color-interactive), 0.9) 0%,
      rgba(var(--color-interactive), 0.4) 30%,
      rgba(var(--color-interactive), 0) 60%
    );
    mix-blend-mode: var(--blending);

    width: 200px;
    height: 200px;
    top: 0;
    left: 0;

    opacity: 1;
    filter: blur(40px);
    pointer-events: none;
    animation: hueRotate 20s linear infinite;
  }
}
